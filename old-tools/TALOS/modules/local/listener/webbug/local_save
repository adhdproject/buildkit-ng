#!/usr/bin/env python
import socket
import calendar
import time
from core.database import essential


meta = {
        'author':'Benjamin Donnelly',
        'ported_by':'Benjamin Donnelly',
        'version':'0.1.0',
	'info':""" This module captures incoming requests from documents tagged with a corresponding bug.  It saves the captured communications to the local sqlite db. """
}

variables = {"port":["80","yes","The port to listen on"],"host":["","no","host value, leave blank for default"]}
	
class module:
	host = ""
	port = 80

	css = """
		body{background-color:white;}
	"""

	#Add in actual return data here
	img = """
		aaaaaaaaaaaaaaa
	"""

	def __init__(self):
		e = essential()
		e.db_exec("CREATE TABLE IF NOT EXISTS requests (id TEXT, type TEXT, ip_address TEXT, user_agent TEXT, time INTEGER)")
		return

	def listen(self):
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		s.bind((self.host, self.port))
		s.listen(10)
		while True:
			con, adr = s.accept()	
			data = con.recv(1024)
			resp = self.parse_data(data, adr[0])
			con.send(resp)
			con.close()
	
	def _log(self, ID, TYPE, ADDRESS, USER_AGENT, TIME=calendar.timegm(time.gmtime())):
		e = essential()
		e.db_exec("INSERT INTO requests VALUES ('%s', '%s', '%s', '%s', %i)" % (ID, TYPE, ADDRESS, USER_AGENT, int(TIME)))
		return

	def parse_data(self, data, ADDRESS):
		

		###Purposefully blanked for now due to time constraints.
		ID = ""
		TYPE = "css"
		USER_AGENT = ""	
	
			
	
		self._log(ID, TYPE, ADDRESS, USER_AGENT)

		if TYPE == "css":
			return self.css
		if TYPE == "img":
			return self.img
		else:
			return "TypeError"
		
class commands:
	def __init__(self):
		return

	@staticmethod
	def run(variables, pt):
		t = module()
		t.port = int(variables['port'][0])
		t.host = variables['host'][0]
		t.listen()
